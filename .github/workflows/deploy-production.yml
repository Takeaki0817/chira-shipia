name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate-backend:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build backend
      run: npm run build:backend
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GOOGLE_CLOUD_PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}

    - name: Typecheck backend
      run: npm run typecheck --workspace=apps/backend

  deploy-frontend:
    runs-on: ubuntu-latest
    environment: production
    needs: validate-backend
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build:frontend
      env:
        VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

    - name: Verify Vercel secrets
      run: |
        if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
          echo "‚ùå VERCEL_TOKEN secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then
          echo "‚ùå VERCEL_ORG_ID secret is not set" 
          exit 1
        fi
        if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
          echo "‚ùå VERCEL_PROJECT_ID secret is not set"
          exit 1
        fi
        echo "‚úÖ All Vercel secrets are configured"

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        github-comment: false
        github-deployment: false

  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-frontend]
    timeout-minutes: 10
    if: always()
    
    steps:
    - name: Wait for deployments to stabilize
      run: |
        echo "‚è±Ô∏è Waiting 60 seconds for backend to warm up and deployments to stabilize..."
        sleep 60

    - name: Check backend health (with exponential backoff)
      run: |
        echo "üîç Starting backend health check with rate-limit friendly timing..."
        max_attempts=5
        base_delay=30
        
        for i in $(seq 1 $max_attempts); do
          echo "üè• Health check attempt $i/$max_attempts..."
          
          # Use HEAD request to be more lightweight and add timeout
          response=$(curl -s -I --max-time 10 -o /dev/null -w "%{http_code}" https://smart-recipe-backend.onrender.com/health || echo "000")
          
          echo "üìä Response: $response"
          
          if [ "$response" = "200" ]; then
            echo "‚úÖ Backend health check passed!"
            break
          elif [ "$response" = "429" ]; then
            echo "‚ö†Ô∏è Rate limited (429). Backend is running but rate limiting health checks."
            if [ $i -eq $max_attempts ]; then
              echo "üí° Backend is responding but rate limiting health checks - this is actually OK for production"
              break
            else
              delay=$((base_delay * i))
              echo "‚è≥ Waiting ${delay}s before retry due to rate limiting..."
              sleep $delay
            fi
          elif [ $i -eq $max_attempts ]; then
            echo "‚ùå Backend health check failed with status $response after $max_attempts attempts"
            echo "üîó Backend URL: https://smart-recipe-backend.onrender.com/health"
            exit 1
          else
            delay=$((base_delay * i))
            echo "‚è≥ Health check attempt $i failed with status $response, retrying in ${delay}s..."
            sleep $delay
          fi
        done

    - name: Check frontend (with retry)
      run: |
        echo "üåê Starting frontend health check..."
        max_attempts=3
        
        for i in $(seq 1 $max_attempts); do
          echo "üñ•Ô∏è Frontend check attempt $i/$max_attempts..."
          
          response=$(curl -s --max-time 15 -o /dev/null -w "%{http_code}" https://smart-recipe-frontend.vercel.app || echo "000")
          echo "üìä Response: $response"
          
          if [ "$response" = "200" ]; then
            echo "‚úÖ Frontend health check passed!"
            break
          elif [ $i -eq $max_attempts ]; then
            echo "‚ùå Frontend health check failed with status $response after $max_attempts attempts"
            echo "üîó Frontend URL: https://smart-recipe-frontend.vercel.app"
            exit 1
          else
            echo "‚è≥ Frontend check failed with status $response, retrying in 20s..."
            sleep 20
          fi
        done

    - name: Notify deployment success
      if: success()
      run: echo "üéâ Production deployment successful! Frontend https://smart-recipe-frontend.vercel.app | Backend https://smart-recipe-backend.onrender.com"