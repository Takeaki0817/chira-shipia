name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate-backend:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build backend
      run: npm run build:backend
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GOOGLE_CLOUD_PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}

    - name: Typecheck backend
      run: npm run typecheck --workspace=apps/backend

  deploy-frontend:
    runs-on: ubuntu-latest
    environment: production
    needs: validate-backend
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build:frontend
      env:
        VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'

  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-frontend]
    timeout-minutes: 5
    if: always()
    
    steps:
    - name: Wait for deployments to stabilize
      run: sleep 30

    - name: Check backend health (with retry)
      run: |
        for i in {1..3}; do
          response=$(curl -s -o /dev/null -w "%{http_code}" https://smart-recipe-backend.onrender.com/health)
          if [ $response -eq 200 ]; then
            echo "Backend health check passed"
            break
          elif [ $i -eq 3 ]; then
            echo "Backend health check failed with status $response after 3 attempts"
            exit 1
          else
            echo "Backend health check attempt $i failed with status $response, retrying..."
            sleep 10
          fi
        done

    - name: Check frontend (with retry)
      run: |
        for i in {1..3}; do
          response=$(curl -s -o /dev/null -w "%{http_code}" https://smart-recipe-frontend.vercel.app)
          if [ $response -eq 200 ]; then
            echo "Frontend health check passed"
            break
          elif [ $i -eq 3 ]; then
            echo "Frontend health check failed with status $response after 3 attempts"
            exit 1
          else
            echo "Frontend health check attempt $i failed with status $response, retrying..."
            sleep 10
          fi
        done

    - name: Notify deployment success
      if: success()
      run: echo "ðŸŽ‰ Production deployment successful! Frontend https://smart-recipe-frontend.vercel.app | Backend https://smart-recipe-backend.onrender.com"